spring:
  profiles:
    active: dev
  jackson:
    property-naming-strategy: SNAKE_CASE
  application:
    name: plato-account

  # 注释单库database配置
#  datasource:
#    url: jdbc:mysql://${plato.datasource.host}:${plato.datasource.port}/plato_account?useSSL=false&characterEncoding=utf-8&serverTimezone=GMT%2B8
#    username: ${plato.datasource.username}
#    password: ${plato.datasource.password}
#    driver-class-name: com.mysql.cj.jdbc.Driver

  shardingsphere:
    datasource:
      #数据源名称
      names: ds0
      ds0:
        connectionTimeoutMilliseconds: 30000
        driver-class-name: com.mysql.cj.jdbc.Driver
        idleTimeoutMilliseconds: 60000
        jdbc-url: jdbc:mysql://${plato.datasource.host}:${plato.datasource.port}/plato_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
        maintenanceIntervalMilliseconds: 30000
        maxLifetimeMilliseconds: 1800000
        maxPoolSize: 50
        minPoolSize: 50
        password: ${plato.datasource.username}
        username: ${plato.datasource.password}
        type: com.zaxxer.hikari.HikariDataSource
    props:
      # 打印执行的数据库以及语句
      sql:
        show: true
    sharding:
      tables:
        # 逻辑表
        traffic:
          # 真实表
          # 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}
          actual-data-nodes: ds0.traffic_$->{0..1}
          #水平分表策略+行表达式分片
          table-strategy:
            inline:
              algorithm-expression: traffic_$->{ account_no % 2 }
              # partition key 分片键
              sharding-column: account_no
          #id生成策略
          key-generator:
            column: id
            props:
              worker:
                id: 0
            #id生成策略
            type: SNOWFLAKE
  redis:
    client-type: jedis
    timeout: 10000ms
    host: ${plato.redis.host}
    port: ${plato.redis.port}
    password: ${plato.redis.password}
    # 数据库
    database: 10
    jedis:
      pool:
        # 连接池中的最小空闲连接
        min-idle: 8
        # 连接池中的最大空闲连接
        max-idle: 128
        # 连接池的最大数据库连接数
        max-active: 128
        # #连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1ms
  cloud:
    nacos:
      discovery:
        server-addr: ${plato.cloud.nacos.host}:${plato.cloud.nacos.port} # default url
        cluster-name: ${plato.cloud.nacos.cluster-name}
        username: ${plato.cloud.nacos.username}
        password: ${plato.cloud.nacos.password}
    loadbalancer:
      nacos:
        enabled: true # 启用nacos负载均衡配置同集群优先 同一集群下是随机策略 @LoadBalancerClient无效

sms:
  app-code: ${plato.sms.app-code}
  template-id: ${plato.sms.template-id}

aliyun:
  oss:
    endpoint: ${plato.aliyun.oss.endpoint}
    access-key-id: ${plato.aliyun.oss.access-key-id}
    access-key-secret: ${plato.aliyun.oss.access-key-secret}
    bucket-name: ${plato.aliyun.oss.bucket-name}
