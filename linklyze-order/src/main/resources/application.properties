spring.profiles.active=dev
spring.jackson.property-naming-strategy=SNAKE_CASE
spring.application.name=linklyze-order

# 注释单库database配置
#  datasource:
#    url: jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/plato_account?useSSL=false&characterEncoding=utf-8&serverTimezone=GMT%2B8
#    username: ${MYSQL_USERNAME:root}
#    password: ${MYSQL_PASSWORD}
#    driver-class-name: com.mysql.cj.jdbc.Driver

# sharding-jdbc配置
# The result is approximately equal to 69.73 years. Apache ShardingSphere snowflake algorithm starts from November 1st, 2016, and can be used until 2086, which we believe can satisfy the requirement of most systems.
spring.shardingsphere.datasource.names=ds0
spring.shardingsphere.props.sql.show=true
# ds0配置
spring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/plato_account?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.ds0.maxPoolSize=50
spring.shardingsphere.datasource.ds0.minPoolSize=50
spring.shardingsphere.datasource.ds0.password=${MYSQL_USERNAME:root}
spring.shardingsphere.datasource.ds0.username=${MYSQL_PASSWORD}
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource

# 真实表
# 指定traffic表的数据分布情况，配置数据节点,行表达式标识符使用 ${...} 或 $->{...}，但前者与 Spring 本身的文件占位符冲突，所以在 Spring 环境中建议使用 $->{...}
#水平分表策略+行表达式分片
spring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}
spring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }
spring.shardingsphere.sharding.tables.traffic.table-strategy.inline..sharding-column=account_no
# 配置id生成策略
spring.shardingsphere.sharding.tables.traffic.key-generator.column=id
spring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE

# product_order
spring.shardingsphere.sharding.tables.product_order.actual-data-nodes=ds0.product_order_$->{0..1}
spring.shardingsphere.sharding.tables.product_order.table-strategy.inline.algorithm-expression=product_order_$->{ account_no % 2 }
spring.shardingsphere.sharding.tables.product_order.table-strategy.inline..sharding-column=account_no
# 配置id生成策略
spring.shardingsphere.sharding.tables.product_order.key-generator.column=id
spring.shardingsphere.sharding.tables.product_order.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.product_order.key-generator.type=SNOWFLAKE

spring.redis.client-type=jedis
spring.redis.timeout=10000ms
spring.redis.host=${REDIS_HOST:localhost}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}
spring.redis.database=10
spring.redis.jedis.pool.min-idle=8
spring.redis.jedis.pool.max-idle=128
spring.redis.jedis.pool.max-active=128
spring.redis.jedis.pool.max-wait=-1ms

# rabbitmq
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:admin}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:admin}
spring.rabbitmq.virtual-host=${RABBITMQ_VIRTUAL_HOST:/}

spring.cloud.nacos.discovery.server-addr=${NACOS_SERVERS:localhost:8848}
spring.cloud.nacos.discovery.cluster-name=${NACOS_CLUSTER_NAME:GZ}
spring.cloud.nacos.discovery.username=${NACOS_USERNAME:nacos}
spring.cloud.nacos.discovery.password=${NACOS_PASSWORD:nacos}
# 启用nacos负载均衡配置同集群优先 同一集群下是随机策略 @LoadBalancerClient无效
spring.cloud.loadbalancer.nacos.enabled=true
