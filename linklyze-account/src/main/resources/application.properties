spring.profiles.active=dev
spring.jackson.property-naming-strategy=SNAKE_CASE
spring.application.name=plato-account

  # \u6CE8\u91CA\u5355\u5E93database\u914D\u7F6E
#  datasource:
#    url: jdbc:mysql://${plato.datasource.host}:${plato.datasource.port}/plato_account?useSSL=false&characterEncoding=utf-8&serverTimezone=GMT%2B8
#    username: ${plato.datasource.username}
#    password: ${plato.datasource.password}
#    driver-class-name: com.mysql.cj.jdbc.Driver

# sharding-jdbc\u914D\u7F6E
# The result is approximately equal to 69.73 years. Apache ShardingSphere snowflake algorithm starts from November 1st, 2016, and can be used until 2086, which we believe can satisfy the requirement of most systems.
spring.shardingsphere.datasource.names=ds0
spring.shardingsphere.props.sql.show=true
# ds0\u914D\u7F6E
spring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://${plato.datasource.host}:${plato.datasource.port}/plato_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.ds0.maxPoolSize=50
spring.shardingsphere.datasource.ds0.minPoolSize=50
spring.shardingsphere.datasource.ds0.password=${plato.datasource.username}
spring.shardingsphere.datasource.ds0.username=${plato.datasource.password}
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource

# \u771F\u5B9E\u8868
# \u6307\u5B9Atraffic\u8868\u7684\u6570\u636E\u5206\u5E03\u60C5\u51B5\uFF0C\u914D\u7F6E\u6570\u636E\u8282\u70B9,\u884C\u8868\u8FBE\u5F0F\u6807\u8BC6\u7B26\u4F7F\u7528 ${...} \u6216 $->{...}\uFF0C\u4F46\u524D\u8005\u4E0E Spring \u672C\u8EAB\u7684\u6587\u4EF6\u5360\u4F4D\u7B26\u51B2\u7A81\uFF0C\u6240\u4EE5\u5728 Spring \u73AF\u5883\u4E2D\u5EFA\u8BAE\u4F7F\u7528 $->{...}
#\u6C34\u5E73\u5206\u8868\u7B56\u7565+\u884C\u8868\u8FBE\u5F0F\u5206\u7247
spring.shardingsphere.sharding.tables.traffic.actual-data-nodes=ds0.traffic_$->{0..1}
spring.shardingsphere.sharding.tables.traffic.table-strategy.inline.algorithm-expression=traffic_$->{ account_no % 2 }
spring.shardingsphere.sharding.tables.traffic.table-strategy.inline..sharding-column=account_no
# \u914D\u7F6Eid\u751F\u6210\u7B56\u7565
spring.shardingsphere.sharding.tables.traffic.key-generator.column=id
spring.shardingsphere.sharding.tables.traffic.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.traffic.key-generator.type=SNOWFLAKE

spring.redis.client-type=jedis
spring.redis.timeout=10000ms
spring.redis.host=${plato.redis.host}
spring.redis.port=${plato.redis.port}
spring.redis.password=${plato.redis.password}
spring.redis.database=10
spring.redis.jedis.pool.min-idle=8
spring.redis.jedis.pool.max-idle=128
spring.redis.jedis.pool.max-active=128
spring.redis.jedis.pool.max-wait=-1ms

spring.cloud.nacos.discovery.server-addr=${plato.cloud.nacos.host}:${plato.cloud.nacos.port} # default url
spring.cloud.nacos.discovery.cluster-name=${plato.cloud.nacos.cluster-name}
spring.cloud.nacos.discovery.username=${plato.cloud.nacos.username}
spring.cloud.nacos.discovery.password=${plato.cloud.nacos.password}
spring.cloud.loadbalancer.nacos.enabled=true # \u542F\u7528nacos\u8D1F\u8F7D\u5747\u8861\u914D\u7F6E\u540C\u96C6\u7FA4\u4F18\u5148 \u540C\u4E00\u96C6\u7FA4\u4E0B\u662F\u968F\u673A\u7B56\u7565 @LoadBalancerClient\u65E0\u6548

sms.app-code=${plato.sms.app-code}
sms.template-id=${plato.sms.template-id}

aliyun.oss.endpoint=${plato.aliyun.oss.endpoint}
aliyun.oss.access-key-id=${plato.aliyun.oss.access-key-id}
aliyun.oss.access-key-secret=${plato.aliyun.oss.access-key-secret}
aliyun.oss.bucket-name=${plato.aliyun.oss.bucket-name}
