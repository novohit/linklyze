spring.profiles.active=dev
spring.jackson.property-naming-strategy=SNAKE_CASE
spring.application.name=linklyze-link
# sharding-jdbc配置
# The result is approximately equal to 69.73 years. Apache ShardingSphere snowflake algorithm starts from November 1st, 2016, and can be used until 2086, which we believe can satisfy the requirement of most systems.
spring.shardingsphere.datasource.names=ds0,ds1,dsa
spring.shardingsphere.props.sql.show=true
# ds0配置
spring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/plato_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.ds0.maxPoolSize=50
spring.shardingsphere.datasource.ds0.minPoolSize=50
spring.shardingsphere.datasource.ds0.password=${MYSQL_USERNAME:root}
spring.shardingsphere.datasource.ds0.username=${MYSQL_PASSWORD}
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
# ds1配置
spring.shardingsphere.datasource.ds1.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/plato_link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds1.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.ds1.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.ds1.maxPoolSize=50
spring.shardingsphere.datasource.ds1.minPoolSize=50
spring.shardingsphere.datasource.ds1.password=${MYSQL_USERNAME:root}
spring.shardingsphere.datasource.ds1.username=${MYSQL_PASSWORD}
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
# dsa配置
spring.shardingsphere.datasource.dsa.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.dsa.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.dsa.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.dsa.jdbc-url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/plato_link_a?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.dsa.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.dsa.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.dsa.maxPoolSize=50
spring.shardingsphere.datasource.dsa.minPoolSize=50
spring.shardingsphere.datasource.dsa.password=${MYSQL_USERNAME:root}
spring.shardingsphere.datasource.dsa.username=${MYSQL_PASSWORD}
spring.shardingsphere.datasource.dsa.type=com.zaxxer.hikari.HikariDataSource
# 默认数据库 不分库分表 短链域名
spring.shardingsphere.sharding.default-data-source-name=ds0
spring.shardingsphere.sharding.default-key-generator.column=id
spring.shardingsphere.sharding.default-key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE
# 短链分组
# 策略:水平分库(2)，水平分表(1) 行表达式分片
spring.shardingsphere.sharding.tables.link_group.database-strategy.inline.sharding-column=account_no
spring.shardingsphere.sharding.tables.link_group.database-strategy.inline.algorithm-expression=ds$->{ account_no % 2 }
# 配置id生成策略
spring.shardingsphere.sharding.tables.link_group.key-generator.column=id
spring.shardingsphere.sharding.tables.link_group.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.link_group.key-generator.type=SNOWFLAKE
# 短链
# 策略:水平分库(3)，水平分表(2) 精准分片
spring.shardingsphere.sharding.tables.short_link.database-strategy.standard.sharding-column=code
spring.shardingsphere.sharding.tables.short_link.database-strategy.standard.precise-algorithm-class-name=com.linklyze.link.strategy.CustomDBPreciseShardingAlgorithm
# 真实库.逻辑表
spring.shardingsphere.sharding.tables.short_link.actual-data-nodes=ds0.short_link,ds1.short_link,dsa.short_link
spring.shardingsphere.sharding.tables.short_link.table-strategy.standard.sharding-column=code
spring.shardingsphere.sharding.tables.short_link.table-strategy.standard.precise-algorithm-class-name=com.linklyze.link.strategy.CustomTablePreciseShardingAlgorithm
# 配置id生成策略
spring.shardingsphere.sharding.tables.short_link.key-generator.column=id
spring.shardingsphere.sharding.tables.short_link.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.short_link.key-generator.type=SNOWFLAKE
# 短链mapping
# 策略:水平分库(2)，水平分表(2) 精准分片
spring.shardingsphere.sharding.tables.short_link_mapping.database-strategy.inline.sharding-column=account_no
spring.shardingsphere.sharding.tables.short_link_mapping.database-strategy.inline.algorithm-expression=ds$->{ account_no % 2 }
# 真实库.真实表
spring.shardingsphere.sharding.tables.short_link_mapping.actual-data-nodes=ds$->{0..1}.short_link_mapping_$->{0..1}
spring.shardingsphere.sharding.tables.short_link_mapping.table-strategy.inline.sharding-column=group_id
spring.shardingsphere.sharding.tables.short_link_mapping.table-strategy.inline.algorithm-expression=short_link_mapping_$->{ group_id % 2 }
# 配置id生成策略
spring.shardingsphere.sharding.tables.short_link_mapping.key-generator.column=id
spring.shardingsphere.sharding.tables.short_link_mapping.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.short_link_mapping.key-generator.type=SNOWFLAKE
# redis配置
spring.redis.client-type=jedis
spring.redis.timeout=10000ms
spring.redis.host=${REDIS_HOST:localhost}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}
spring.redis.database=10
spring.redis.jedis.pool.min-idle=8
spring.redis.jedis.pool.max-idle=128
spring.redis.jedis.pool.max-active=128
spring.redis.jedis.pool.max-wait=-1ms
# rabbitmq
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:admin}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:admin}
spring.rabbitmq.virtual-host=${RABBITMQ_VIRTUAL_HOST:/}
# kafka
spring.kafka.bootstrap-servers=${KAFKA_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# nacos服务注册发现
spring.cloud.nacos.discovery.server-addr=${NACOS_SERVERS:localhost:8848}
spring.cloud.nacos.discovery.cluster-name=${NACOS_CLUSTER_NAME:GZ}
spring.cloud.nacos.discovery.username=${NACOS_USERNAME:nacos}
spring.cloud.nacos.discovery.password=${NACOS_PASSWORD:nacos}
spring.cloud.loadbalancer.nacos.enabled=true

# 在BaseModel中配置了
#spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
#spring.jackson.time-zone=GMT+8
