spring.profiles.active=dev
spring.jackson.property-naming-strategy=SNAKE_CASE
spring.application.name=linklyze-link
# sharding-jdbc\u914D\u7F6E
# The result is approximately equal to 69.73 years. Apache ShardingSphere snowflake algorithm starts from November 1st, 2016, and can be used until 2086, which we believe can satisfy the requirement of most systems.
spring.shardingsphere.datasource.names=ds0,ds1,dsa
spring.shardingsphere.props.sql.show=true
# ds0\u914D\u7F6E
spring.shardingsphere.datasource.ds0.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/plato_link_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds0.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.ds0.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.ds0.maxPoolSize=50
spring.shardingsphere.datasource.ds0.minPoolSize=50
spring.shardingsphere.datasource.ds0.password=${MYSQL_USERNAME:root}
spring.shardingsphere.datasource.ds0.username=${MYSQL_PASSWORD}
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
# ds1\u914D\u7F6E
spring.shardingsphere.datasource.ds1.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/plato_link_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.ds1.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.ds1.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.ds1.maxPoolSize=50
spring.shardingsphere.datasource.ds1.minPoolSize=50
spring.shardingsphere.datasource.ds1.password=${MYSQL_USERNAME:root}
spring.shardingsphere.datasource.ds1.username=${MYSQL_PASSWORD}
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
# dsa\u914D\u7F6E
spring.shardingsphere.datasource.dsa.connectionTimeoutMilliseconds=30000
spring.shardingsphere.datasource.dsa.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.dsa.idleTimeoutMilliseconds=60000
spring.shardingsphere.datasource.dsa.jdbc-url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/plato_link_a?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true
spring.shardingsphere.datasource.dsa.maintenanceIntervalMilliseconds=30000
spring.shardingsphere.datasource.dsa.maxLifetimeMilliseconds=1800000
spring.shardingsphere.datasource.dsa.maxPoolSize=50
spring.shardingsphere.datasource.dsa.minPoolSize=50
spring.shardingsphere.datasource.dsa.password=${MYSQL_USERNAME:root}
spring.shardingsphere.datasource.dsa.username=${MYSQL_PASSWORD}
spring.shardingsphere.datasource.dsa.type=com.zaxxer.hikari.HikariDataSource
# \u9ED8\u8BA4\u6570\u636E\u5E93 \u4E0D\u5206\u5E93\u5206\u8868 \u77ED\u94FE\u57DF\u540D
spring.shardingsphere.sharding.default-data-source-name=ds0
spring.shardingsphere.sharding.default-key-generator.column=id
spring.shardingsphere.sharding.default-key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.default-key-generator.type=SNOWFLAKE
# \u77ED\u94FE\u5206\u7EC4
# \u7B56\u7565:\u6C34\u5E73\u5206\u5E93(2)\uFF0C\u6C34\u5E73\u5206\u8868(1) \u884C\u8868\u8FBE\u5F0F\u5206\u7247
spring.shardingsphere.sharding.tables.link_group.database-strategy.inline.sharding-column=account_no
spring.shardingsphere.sharding.tables.link_group.database-strategy.inline.algorithm-expression=ds$->{ account_no % 2 }
# \u914D\u7F6Eid\u751F\u6210\u7B56\u7565
spring.shardingsphere.sharding.tables.link_group.key-generator.column=id
spring.shardingsphere.sharding.tables.link_group.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.link_group.key-generator.type=SNOWFLAKE
# \u77ED\u94FE
# \u7B56\u7565:\u6C34\u5E73\u5206\u5E93(3)\uFF0C\u6C34\u5E73\u5206\u8868(2) \u7CBE\u51C6\u5206\u7247
spring.shardingsphere.sharding.tables.short_link.database-strategy.standard.sharding-column=code
spring.shardingsphere.sharding.tables.short_link.database-strategy.standard.precise-algorithm-class-name=com.linklyze.link.strategy.CustomDBPreciseShardingAlgorithm
# \u771F\u5B9E\u5E93.\u903B\u8F91\u8868
spring.shardingsphere.sharding.tables.short_link.actual-data-nodes=ds0.short_link,ds1.short_link,dsa.short_link
spring.shardingsphere.sharding.tables.short_link.table-strategy.standard.sharding-column=code
spring.shardingsphere.sharding.tables.short_link.table-strategy.standard.precise-algorithm-class-name=com.linklyze.link.strategy.CustomTablePreciseShardingAlgorithm
# \u914D\u7F6Eid\u751F\u6210\u7B56\u7565
spring.shardingsphere.sharding.tables.short_link.key-generator.column=id
spring.shardingsphere.sharding.tables.short_link.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.short_link.key-generator.type=SNOWFLAKE
# \u77ED\u94FEmapping
# \u7B56\u7565:\u6C34\u5E73\u5206\u5E93(2)\uFF0C\u6C34\u5E73\u5206\u8868(2) \u7CBE\u51C6\u5206\u7247
spring.shardingsphere.sharding.tables.short_link_mapping.database-strategy.inline.sharding-column=account_no
spring.shardingsphere.sharding.tables.short_link_mapping.database-strategy.inline.algorithm-expression=ds$->{ account_no % 2 }
# \u771F\u5B9E\u5E93.\u771F\u5B9E\u8868
spring.shardingsphere.sharding.tables.short_link_mapping.actual-data-nodes=ds$->{0..1}.short_link_mapping_$->{0..1}
spring.shardingsphere.sharding.tables.short_link_mapping.table-strategy.inline.sharding-column=group_id
spring.shardingsphere.sharding.tables.short_link_mapping.table-strategy.inline.algorithm-expression=short_link_mapping_$->{ group_id % 2 }
# \u914D\u7F6Eid\u751F\u6210\u7B56\u7565
spring.shardingsphere.sharding.tables.short_link_mapping.key-generator.column=id
spring.shardingsphere.sharding.tables.short_link_mapping.key-generator.props.worker.id=${system.snowflake.worker-id}
spring.shardingsphere.sharding.tables.short_link_mapping.key-generator.type=SNOWFLAKE
# redis\u914D\u7F6E
spring.redis.client-type=jedis
spring.redis.timeout=10000ms
spring.redis.host=${REDIS_HOST:localhost}
spring.redis.port=${REDIS_PORT:6379}
spring.redis.password=${REDIS_PASSWORD:}
spring.redis.database=10
spring.redis.jedis.pool.min-idle=8
spring.redis.jedis.pool.max-idle=128
spring.redis.jedis.pool.max-active=128
spring.redis.jedis.pool.max-wait=-1ms
# rabbitmq
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.port=${RABBITMQ_PORT:5672}
spring.rabbitmq.username=${RABBITMQ_USERNAME:admin}
spring.rabbitmq.password=${RABBITMQ_PASSWORD:admin}
spring.rabbitmq.virtual-host=${RABBITMQ_VIRTUAL_HOST:/}
# kafka
spring.kafka.bootstrap-servers=${KAFKA_SERVERS:localhost:9092}
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# nacos\u670D\u52A1\u6CE8\u518C\u53D1\u73B0
spring.cloud.nacos.discovery.server-addr=${NACOS_SERVERS:localhost:8848}
spring.cloud.nacos.discovery.cluster-name=${NACOS_CLUSTER_NAME:GZ}
spring.cloud.nacos.discovery.username=${NACOS_USERNAME}
spring.cloud.nacos.discovery.password=${NACOS_PASSWORD}
spring.cloud.loadbalancer.nacos.enabled=true

# \u5728BaseModel\u4E2D\u914D\u7F6E\u4E86
#spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
#spring.jackson.time-zone=GMT+8
